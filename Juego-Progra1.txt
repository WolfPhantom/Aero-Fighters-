#include "stdafx.h"
#include "conio.h"
#include "windows.h"
#include "iostream"

#define FILAS 30
#define COLUMNAS 70
#define N 3
using namespace System;
using namespace std;
int mapa_juego[FILAS][COLUMNAS];
int mapa1[30][70] =
{
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
};

int mapa2[30][70] =
{
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
};

int mapa3[30][70] =
{
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
};

int mapa4[30][70] =
{
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 1, 1, 1, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
};

int mapa5[30][70] =
{
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 5, 5, 1, 2, 2, 2, 1, 5, 5, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 5, 2, 5, 2, 5, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 5, 2, 5, 2, 5, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 5, 2, 2, 2, 1, 2, 2, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
};

int mapa6[30][70] = {
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 5, 2, 1, 2, 2, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 5, 2, 2, 2, 5, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1 },
	{ 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1 },
	{ 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1 },
	{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1 },
	{ 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 5, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
};

int mapa7[30][70] = {
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1 },
	{ 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1 },
	{ 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1 },
	{ 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1 },
	{ 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1 },
	{ 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 5, 2, 2, 1, 1, 1, 1, 2, 2, 5, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
};

int mapa8[30][70] = {
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 2, 2, 5, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 5, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 2, 5, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 5, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 5, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 5, 2, 2, 1, 2, 1, 2, 2, 2, 5, 2, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
};

void imprime_mapa1(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa1[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void imprime_mapa2(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa2[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void imprime_mapa3(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa3[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void imprime_mapa4(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa4[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void imprime_mapa5(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa5[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void imprime_mapa6(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa6[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void imprime_mapa7(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa7[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void imprime_mapa8(int mapa[FILAS][COLUMNAS]) {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			mapa_juego[f][c] = mapa8[f][c];
			if (mapa[f][c] == 0) { Console::ForegroundColor = ConsoleColor::Magenta; cout << (char)178; }
			if (mapa[f][c] == 1) { Console::ForegroundColor = ConsoleColor::Green; cout << (char)178; }
			if (mapa[f][c] == 2) { Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178; }
			if (mapa[f][c] == 3) { Console::ForegroundColor = ConsoleColor::DarkYellow; cout << (char)178; }
			if (mapa[f][c] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << (char)178; }
			if (mapa[f][c] == 5) { Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		}
		cout << "\n";
	}
}
void ubica(int x, int y) {
	Console::SetCursorPosition(x, y);
}
void posicion_enemigo(int *X, int *Y, int *DX, int *Xb, int *Yb) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X[i] = 25;
			Y[i] = 7;
			DX[i] = 1;
			Xb[i] = r.Next(26, 46);
			Yb[i] = 7;
		}
		if (i == 1) {
			X[i] = 35;
			Y[i] = 15;
			DX[i] = 1;
			Xb[i] = r.Next(26, 46);
			Yb[i] = 15;
		}
		if (i == 2) {
			X[i] = 43;
			Y[i] = 23;
			DX[i] = 1;
			Xb[i] = r.Next(26, 46);
			Yb[i] = 23;
		}

	}
}
void posicion_enemigo1(int *X1, int *Y1, int *DX1, int *Xb1, int *Yb1) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X1[i] = 18;
			Y1[i] = 12;
			DX1[i] = 1;
			Xb1[i] = r.Next(16, 21);
			Yb1[i] = 12;
		}
		if (i == 1) {
			X1[i] = 51;
			Y1[i] = 3;
			DX1[i] = 1;
			Xb1[i] = r.Next(44, 55);
			Yb1[i] = 3;
		}
		if (i == 2) {
			X1[i] = 48;
			Y1[i] = 16;
			DX1[i] = 1;
			Xb1[i] = r.Next(44, 55);
			Yb1[i] = 16;
		}
	}
}
void posicion_enemigo2(int *X2, int *Y2, int *DX2, int *Xb2, int *Yb2) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X2[i] = 23;
			Y2[i] = 5;
			DX2[i] = 1;
			Xb2[i] = r.Next(22, 47);
			Yb2[i] = 5;
		}
		if (i == 1) {
			X2[i] = 32;
			Y2[i] = 12;
			DX2[i] = 1;
			Xb2[i] = r.Next(16, 53);
			Yb2[i] = 12;
		}
		if (i == 2) {
			X2[i] = 38;
			Y2[i] = 20;
			DX2[i] = 1;
			Xb2[i] = r.Next(16, 53);
			Yb2[i] = 20;
		}
	}
}
void posicion_enemigo3(int *X3, int *Y3, int *DX3, int *Xb3, int *Yb3) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X3[i] = 20;
			Y3[i] = 4;
			DX3[i] = 1;
			Xb3[i] = r.Next(17, 33);
			Yb3[i] = 4;
		}
		if (i == 1) {
			X3[i] = 48;
			Y3[i] = 12;
			DX3[i] = 1;
			Xb3[i] = r.Next(36, 51);
			Yb3[i] = 12;
		}
		if (i == 2) {
			X3[i] = 35;
			Y3[i] = 20;
			DX3[i] = 1;
			Xb3[i] = r.Next(17, 51);
			Yb3[i] = 20;
		}
	}
}
void posicion_enemigo4(int *X4, int *Y4, int *DX4, int *Xb4, int *Yb4) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X4[i] = 15;
			Y4[i] = 3;
			DX4[i] = 1;
			Xb4[i] = r.Next(13, 56);
			Yb4[i] = 3;
		}
		if (i == 1) {
			X4[i] = 31;
			Y4[i] = 13;
			DX4[i] = 1;
			Xb4[i] = r.Next(29, 41);
			Yb4[i] = 13;
		}
		if (i == 2) {
			X4[i] = 52;
			Y4[i] = 20;
			DX4[i] = 1;
			Xb4[i] = r.Next(41, 56);
			Yb4[i] = 20;
		}
	}
}
void posicion_enemigo5(int *X5, int *Y5, int *DX5, int *Xb5, int *Yb5) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X5[i] = 16;
			Y5[i] = 3;
			DX5[i] = 1;
			Xb5[i] = r.Next(13, 56);
			Yb5[i] = 3;
		}
		if (i == 1) {
			X5[i] = 20;
			Y5[i] = 13;
			DX5[i] = 1;
			Xb5[i] = r.Next(13, 33);
			Yb5[i] = 13;
		}
		if (i == 2) {
			X5[i] = 30;
			Y5[i] = 20;
			DX5[i] = 1;
			Xb5[i] = r.Next(24, 56);
			Yb5[i] = 20;
		}
	}
}
void posicion_enemigo6(int *X6, int *Y6, int *DX6, int *Xb6, int *Yb6) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X6[i] = 19;
			Y6[i] = 2;
			DX6[i] = 1;
			Xb6[i] = r.Next(13, 56);
			Yb6[i] = 2;
		}
		if (i == 1) {
			X6[i] = 16;
			Y6[i] = 13;
			DX6[i] = 1;
			Xb6[i] = r.Next(13, 27);
			Yb6[i] = 13;
		}
		if (i == 2) {
			X6[i] = 53;
			Y6[i] = 16;
			DX6[i] = 1;
			Xb6[i] = r.Next(44, 56);
			Yb6[i] = 16;
		}
	}
}
void posicion_enemigo7(int *X7, int *Y7, int *DX7, int *Xb7, int *Yb7) {
	Random r;
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			X7[i] = 19;
			Y7[i] = 2;
			DX7[i] = 1;
			Xb7[i] = r.Next(13, 56);
			Yb7[i] = 2;
		}
		if (i == 1) {
			X7[i] = 33;
			Y7[i] = 10;
			DX7[i] = 1;
			Xb7[i] = r.Next(31, 38);
			Yb7[i] = 10;
		}
		if (i == 2) {
			X7[i] = 24;
			Y7[i] = 25;
			DX7[i] = 1;
			Xb7[i] = r.Next(13, 56);
			Yb7[i] = 25;
		}
	}
}
void movimiento_enemigos(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala=1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			Xb[i] = r.Next(26, 46);
			
			
		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void movimiento_enemigos1(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala = 1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			else
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			}
			
		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			if (i==0)
			{
				Xb[0] = r.Next(16, 21);
				
			}
			else
			{
				if (i==1)
				{
					Xb[1] = r.Next(44, 55);
				}
				else
				{
					Xb[2] = r.Next(44, 55);
				}
			}
			
		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void movimiento_enemigos2(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala = 1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			else
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			}

		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			if (i == 0)
			{
				Xb[0] = r.Next(22, 46);

			}
			else
			{
				if (i == 1)
				{
					Xb[1] = r.Next(16, 53);
				}
				else
				{
					Xb[2] = r.Next(16, 53);
				}
			}

		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void movimiento_enemigos3(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala = 1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			else
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			}

		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			if (i == 0)
			{
				Xb[0] = r.Next(17, 32);

			}
			else
			{
				if (i == 1)
				{
					Xb[1] = r.Next(36, 51);
				}
				else
				{
					Xb[2] = r.Next(17, 51);
				}
			}

		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void movimiento_enemigos4(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala = 1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			else
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			}

		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			if (i == 0)
			{
				Xb[0] = r.Next(13, 56);

			}
			else
			{
				if (i == 1)
				{
					Xb[1] = r.Next(29, 41);
				}
				else
				{
					Xb[2] = r.Next(41, 56);
				}
			}

		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void movimiento_enemigos5(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala = 1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			else
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			}

		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			if (i == 0)
			{
				Xb[0] = r.Next(13, 56);

			}
			else
			{
				if (i == 1)
				{
					Xb[1] = r.Next(13, 33);
				}
				else
				{
					Xb[2] = r.Next(24, 56);
				}
			}

		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void movimiento_enemigos6(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala = 1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			else
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			}

		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			if (i == 0)
			{
				Xb[0] = r.Next(13, 56);

			}
			else
			{
				if (i == 1)
				{
					Xb[1] = r.Next(13, 27);
				}
				else
				{
					Xb[2] = r.Next(44, 56);
				}
			}

		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void movimiento_enemigos7(int *X, int *Y, int *DX, int i, int *Xb, int *Yb) {
	int activa_bala = 0;
	Random r;
	//borar
	ubica(X[i], Y[i]); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

	//mover
	if (mapa_juego[Y[i]][X[i] + 1] == 1) DX[i] = DX[i] * -1;//cambie esta parte
	if (mapa_juego[Y[i]][X[i] - 1] == 1) DX[i] = DX[i] * -1;//agrege esta parte

	X[i] = X[i] + DX[i];
	//bala
	if (Xb[i] == X[i])
	{
		activa_bala = 1;
	}

	if (activa_bala = 1)
	{
		//borrar
		if (mapa_juego[Yb[i]][Xb[i]] == 5) { Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Red; cout << (char)2; }
		else
		{
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			else
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			}

		}
		//mover
		if (Yb[i] < 29) Yb[i]++;

		//imprimir
		Console::SetCursorPosition(Xb[i], Yb[i]); Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "*";

		if (Yb[i] == 29) {
			if (mapa_juego[Yb[i]][Xb[i]] == 1)
			{
				Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Green; cout << (char)178;
			}
			Console::SetCursorPosition(Xb[i], Yb[i]);  Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;
			activa_bala = 0;
			Yb[i] = Y[i];
			if (i == 0)
			{
				Xb[0] = r.Next(13, 56);

			}
			else
			{
				if (i == 1)
				{
					Xb[1] = r.Next(31, 38);
				}
				else
				{
					Xb[2] = r.Next(13, 56);
				}
			}

		}
	}

	//imprimir
	ubica(X[i], Y[i]); cout << (char)4;
}
void mensaje(int x, int y, int puntaje, int vidas) {

	int vx = 40;
	//mensajes
	Console::SetCursorPosition(0, 32); Console::ForegroundColor = ConsoleColor::Magenta;
	cout << "Puntaje: " << puntaje;
	Console::SetCursorPosition(15, 32); Console::ForegroundColor = ConsoleColor::Red;
	cout << "X: " << x;
	Console::SetCursorPosition(25, 32); Console::ForegroundColor = ConsoleColor::Blue;
	cout << "Y: " << y;
	Console::SetCursorPosition(33, 32); Console::ForegroundColor = ConsoleColor::Green;
	cout << "Vidas: ";
	if (vidas == 3) {
		Console::SetCursorPosition(40, 32); Console::ForegroundColor = ConsoleColor::Green;
		cout << char(3);
		Console::SetCursorPosition(42, 32); Console::ForegroundColor = ConsoleColor::Green;
		cout << char(3);
		Console::SetCursorPosition(44, 32); Console::ForegroundColor = ConsoleColor::Green;
		cout << char(3);
	}
	if (vidas == 2) {
		Console::SetCursorPosition(44, 32); Console::ForegroundColor = ConsoleColor::Green;
		cout << " ";
	}
	if (vidas == 1) {
		Console::SetCursorPosition(42, 32); Console::ForegroundColor = ConsoleColor::Green;
		cout << " ";
	}
}

int main()
{
	Console::SetWindowSize(70, 35);
	Console::CursorVisible = false;
	imprime_mapa1(mapa1);
	int x = 27, y = 29; //posicion inicial de la nave
	int puntaje = 0;
	char tecla;
	int vidas = 3;
	//Variables para bala
	int Xb[N], Yb[N];
	//variables para enemigos
	int X[N], Y[N], DX[N];
	posicion_enemigo(X, Y, DX,Xb,Yb);

	//Dibuja en la ventana de consola
	for (int i = 0; i < N; i++)
	{
		ubica(X[i], Y[i]); cout << (char)4;
	}

	int i = 0;
	while (1)
	{
		Console::SetCursorPosition(x, y);
		Console::ForegroundColor = ConsoleColor::Cyan;
		cout << (char)30;
		movimiento_enemigos(X, Y, DX, i,Xb,Yb);
		i++;
		if (i == N) i = 0;
		Sleep(50);

		mensaje(x, y, puntaje, vidas);

		//movimiento de la nave
		if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
		{
			tecla = _getch(); //capturamos la tecla pulsada

							  //borrar
			Console::SetCursorPosition(x, y); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

			//mover
			if (tecla == 77 && mapa_juego[y][x + 1] != 1)
				x++;

			if (tecla == 75 && mapa_juego[y][x - 1] != 1)
				x--;

			if (tecla == 72 && mapa_juego[y - 1][x] != 1 && y != 0)
				y--;

			if (tecla == 80 && mapa_juego[y + 1][x] != 1 && y != 29)
				y++;

			//imprimir
			Console::SetCursorPosition(x, y); Console::ForegroundColor = ConsoleColor::Cyan;
			cout << (char)30;
		}//fin kbhit
		if (y - 1 == -1 && puntaje == 300) {
			//inicio mapa 2
			Console::Clear();
			imprime_mapa2(mapa2);
			int x1 = x, y1 = 29; //posicion inicial de la nave

			char tecla1;
			//Variables para bala
			int Xb1[N], Yb1[N];
			////variables para enemigos
			int X1[N], Y1[N], DX1[N];
			posicion_enemigo1(X1, Y1, DX1,Xb1,Yb1);
			////Dibuja en la ventana de consola
			for (int i = 0; i < N; i++)
			{
				ubica(X1[i], Y1[i]); cout << (char)4;
			}
			int i1 = 0;
			while (1)
			{
				Console::SetCursorPosition(x1, y1);
				Console::ForegroundColor = ConsoleColor::Cyan;
				cout << (char)30;
				movimiento_enemigos1(X1, Y1, DX1, i1,Xb1,Yb1);
				i1++;
				if (i1 == N) i1 = 0;
				Sleep(50);

				mensaje(x1, y1, puntaje, vidas);

				//movimiento de la nave
				if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
				{
					tecla1 = _getch(); //capturamos la tecla pulsada

									   //borrar
					Console::SetCursorPosition(x1, y1); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

					//mover
					if (tecla1 == 77 && mapa_juego[y1][x1 + 1] != 1)
						x1++;

					if (tecla1 == 75 && mapa_juego[y1][x1 - 1] != 1)
						x1--;

					if (tecla1 == 72 && mapa_juego[y1 - 1][x1] != 1 && y1 != 0)
						y1--;

					if (tecla1 == 80 && mapa_juego[y1 + 1][x1] != 1 && y1 != 29)
						y1++;

					//imprimir
					Console::SetCursorPosition(x1, y1); Console::ForegroundColor = ConsoleColor::Cyan;
					cout << (char)30;
				}//fin kbhit
				if (y1 - 1 == -1 && puntaje == 1100)
				{
					Console::Clear();
					imprime_mapa3(mapa3);
					int x2 = x1, y2 = 29; //posicion inicial de la nave

					char tecla2;
					//Variables para bala
					int Xb2[N], Yb2[N];
					////variables para enemigos
					int X2[N], Y2[N], DX2[N];
					posicion_enemigo2(X2, Y2, DX2,Xb2,Yb2);
					////Dibuja en la ventana de consola
					for (int i = 0; i < N; i++)
					{
						ubica(X2[i], Y2[i]); cout << (char)4;
					}
					int i2 = 0;
					while (1)
					{
						Console::SetCursorPosition(x2, y2);
						Console::ForegroundColor = ConsoleColor::Cyan;
						cout << (char)30;
						movimiento_enemigos2(X2, Y2, DX2, i2,Xb2,Yb2);
						i2++;
						if (i2 == N) i2 = 0;
						Sleep(50);

						mensaje(x2, y2, puntaje, vidas);

						//movimiento de la nave
						if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
						{
							tecla2 = _getch(); //capturamos la tecla pulsada

											   //borrar
							Console::SetCursorPosition(x2, y2); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

							//mover
							if (tecla2 == 77 && mapa_juego[y2][x2 + 1] != 1)
								x2++;

							if (tecla2 == 75 && mapa_juego[y2][x2 - 1] != 1)
								x2--;

							if (tecla2 == 72 && mapa_juego[y2 - 1][x2] != 1 && y2 != 0)
								y2--;

							if (tecla2 == 80 && mapa_juego[y2 + 1][x2] != 1 && y2 != 29)
								y2++;

							//imprimir
							Console::SetCursorPosition(x2, y2); Console::ForegroundColor = ConsoleColor::Cyan;
							cout << (char)30;
						}//fin kbhit
						if (y2 - 1 == -1 && puntaje == 1700)
						{
							Console::Clear();
							imprime_mapa4(mapa4);
							int x3 = x2, y3 = 29; //posicion inicial de la nave

							char tecla3;
							//Variables para bala
							int Xb3[N], Yb3[N];
							////variables para enemigos
							int X3[N], Y3[N], DX3[N];
							posicion_enemigo3(X3, Y3, DX3,Xb3,Yb3);
							////Dibuja en la ventana de consola
							for (int i = 0; i < N; i++)
							{
								ubica(X3[i], Y3[i]); cout << (char)4;
							}
							int i3 = 0;
							while (1)
							{
								Console::SetCursorPosition(x3, y3);
								Console::ForegroundColor = ConsoleColor::Cyan;
								cout << (char)30;
								movimiento_enemigos3(X3, Y3, DX3, i3,Xb3,Yb3);
								i3++;
								if (i3 == N) i3 = 0;
								Sleep(50);

								mensaje(x3, y3, puntaje, vidas);

								//movimiento de la nave
								if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
								{
									tecla3 = _getch(); //capturamos la tecla pulsada

													   //borrar
									Console::SetCursorPosition(x3, y3); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

									//mover
									if (tecla3 == 77 && mapa_juego[y3][x3 + 1] != 1)
										x3++;

									if (tecla3 == 75 && mapa_juego[y3][x3 - 1] != 1)
										x3--;

									if (tecla3 == 72 && mapa_juego[y3 - 1][x3] != 1 && y3 != 0)
										y3--;

									if (tecla3 == 80 && mapa_juego[y3 + 1][x3] != 1 && y3 != 29)
										y3++;

									//imprimir
									Console::SetCursorPosition(x3, y3); Console::ForegroundColor = ConsoleColor::Cyan;
									cout << (char)30;
								}//fin kbhit
								if (y3 - 1 == -1 && puntaje == 2300)
								{
									Console::Clear();
									imprime_mapa5(mapa5);
									int x4 = x3, y4 = 29; //posicion inicial de la nave

									char tecla4;
									//Variables para bala
									int Xb4[N], Yb4[N];
									////variables para enemigos
									int X4[N], Y4[N], DX4[N];
									posicion_enemigo4(X4, Y4, DX4,Xb4,Yb4);
									////Dibuja en la ventana de consola
									for (int i = 0; i < N; i++)
									{
										ubica(X4[i], Y4[i]); cout << (char)4;
									}
									int i4 = 0;
									while (1)
									{
										Console::SetCursorPosition(x4, y4);
										Console::ForegroundColor = ConsoleColor::Cyan;
										cout << (char)30;
										movimiento_enemigos4(X4, Y4, DX4, i4,Xb4,Yb4);
										i4++;
										if (i4 == N) i4 = 0;
										Sleep(50);

										mensaje(x4, y4, puntaje, vidas);

										//movimiento de la nave
										if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
										{
											tecla4 = _getch(); //capturamos la tecla pulsada

															   //borrar
											Console::SetCursorPosition(x4, y4); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

											//mover
											if (tecla4 == 77 && mapa_juego[y4][x4 + 1] != 1)
												x4++;

											if (tecla4 == 75 && mapa_juego[y4][x4 - 1] != 1)
												x4--;

											if (tecla4 == 72 && mapa_juego[y4 - 1][x4] != 1 && y4 != 0)
												y4--;

											if (tecla4 == 80 && mapa_juego[y4 + 1][x4] != 1 && y4 != 29)
												y4++;

											//imprimir
											Console::SetCursorPosition(x4, y4); Console::ForegroundColor = ConsoleColor::Cyan;
											cout << (char)30;
										}//fin kbhit
										if (y4 - 1 == -1 && puntaje == 4400)
										{
											Console::Clear();
											imprime_mapa6(mapa6);
											int x5 = x4, y5 = 29; //posicion inicial de la nave

											char tecla5;
											//Variables para bala
											int Xb5[N], Yb5[N];
											////variables para enemigos
											int X5[N], Y5[N], DX5[N];
											posicion_enemigo5(X5, Y5, DX5,Xb5,Yb5);
											////Dibuja en la ventana de consola
											for (int i = 0; i < N; i++)
											{
												ubica(X5[i], Y5[i]); cout << (char)4;
											}
											int i5 = 0;
											while (1)
											{
												Console::SetCursorPosition(x5, y5);
												Console::ForegroundColor = ConsoleColor::Cyan;
												cout << (char)30;
												movimiento_enemigos5(X5, Y5, DX5, i5,Xb5,Yb5);
												i5++;
												if (i5 == N) i5 = 0;
												Sleep(50);

												mensaje(x5, y5, puntaje, vidas);

												//movimiento de la nave
												if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
												{
													tecla5 = _getch(); //capturamos la tecla pulsada

																	   //borrar
													Console::SetCursorPosition(x5, y5); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

													//mover
													if (tecla5 == 77 && mapa_juego[y5][x5 + 1] != 1)
														x5++;

													if (tecla5 == 75 && mapa_juego[y5][x5 - 1] != 1)
														x5--;

													if (tecla5 == 72 && mapa_juego[y5 - 1][x5] != 1 && y5 != 0)
														y5--;

													if (tecla5 == 80 && mapa_juego[y5 + 1][x5] != 1 && y5 != 29)
														y5++;

													//imprimir
													Console::SetCursorPosition(x5, y5); Console::ForegroundColor = ConsoleColor::Cyan;
													cout << (char)30;
												}//fin kbhit
												if (y5 - 1 == -1 && puntaje == 5300)
												{
													Console::Clear();
													imprime_mapa7(mapa7);
													int x6 = x5, y6 = 29; //posicion inicial de la nave

													char tecla6;
													//Variables para bala
													int Xb6[N], Yb6[N];
													////variables para enemigos
													int X6[N], Y6[N], DX6[N];
													posicion_enemigo6(X6, Y6, DX6,Xb6,Yb6);
													////Dibuja en la ventana de consola
													for (int i = 0; i < N; i++)
													{
														ubica(X6[i], Y6[i]); cout << (char)4;
													}
													int i6 = 0;

													while (1)
													{
														Console::SetCursorPosition(x6, y6);
														Console::ForegroundColor = ConsoleColor::Cyan;
														cout << (char)30;
														movimiento_enemigos6(X6, Y6, DX6, i6,Xb6,Yb6);
														i6++;
														if (i6 == N) i6 = 0;
														Sleep(50);

														mensaje(x6, y6, puntaje, vidas);

														//movimiento de la nave
														if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
														{
															tecla6 = _getch(); //capturamos la tecla pulsada

																			   //borrar
															Console::SetCursorPosition(x6, y6); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

															//mover
															if (tecla6 == 77 && mapa_juego[y6][x6 + 1] != 1)
																x6++;

															if (tecla6 == 75 && mapa_juego[y6][x6 - 1] != 1)
																x6--;

															if (tecla6 == 72 && mapa_juego[y6 - 1][x6] != 1 && y6 != 0)
																y6--;

															if (tecla6 == 80 && mapa_juego[y6 + 1][x6] != 1 && y6 != 29)
																y6++;

															//imprimir
															Console::SetCursorPosition(x6, y6); Console::ForegroundColor = ConsoleColor::Cyan;
															cout << (char)30;
														}//fin kbhit
														if (y6 - 1 == -1 && puntaje == 5900)
														{
															Console::Clear();
															imprime_mapa8(mapa8);
															int x7 = x6, y7 = 29; //posicion inicial de la nave

															char tecla7;
															//Variables para bala
															int Xb7[N], Yb7[N];
															////variables para enemigos
															int X7[N], Y7[N], DX7[N];
															posicion_enemigo7(X7, Y7, DX7,Xb7,Yb7);
															////Dibuja en la ventana de consola
															for (int i = 0; i < N; i++)
															{
																ubica(X7[i], Y7[i]); cout << (char)4;
															}
															int i7 = 0;

															while (1)
															{
																Console::SetCursorPosition(x7, y7);
																Console::ForegroundColor = ConsoleColor::Cyan;
																cout << (char)30;
																movimiento_enemigos7(X7, Y7, DX7, i7,Xb7,Yb7);
																i7++;
																if (i7 == N) i7 = 0;
																Sleep(50);

																mensaje(x7, y7, puntaje, vidas);

																//movimiento de la nave
																if (_kbhit()) //kbhit detecta si se ha pulsado una tecla
																{
																	tecla7 = _getch(); //capturamos la tecla pulsada

																					   //borrar
																	Console::SetCursorPosition(x7, y7); Console::ForegroundColor = ConsoleColor::Blue; cout << (char)178;

																	//mover
																	if (tecla7 == 77 && mapa_juego[y7][x7 + 1] != 1)
																		x7++;

																	if (tecla7 == 75 && mapa_juego[y7][x7 - 1] != 1)
																		x7--;

																	if (tecla7 == 72 && mapa_juego[y7 - 1][x7] != 1 && y7 != 0)
																		y7--;

																	if (tecla7 == 80 && mapa_juego[y7 + 1][x7] != 1 && y7 != 29)
																		y7++;

																	//imprimir
																	Console::SetCursorPosition(x7, y7); Console::ForegroundColor = ConsoleColor::Cyan;
																	cout << (char)30;
																}//fin kbhit
																if (y7 - 1 == -1 && puntaje == 7100)
																{
																	break;
																}
																else {
																	Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
																	cout << "Puntaje necesario: 7100";
																}
																//puntaje
																if (mapa_juego[y7][x7] == 5)
																{
																	puntaje += 100;
																	mapa_juego[y7][x7] = 2;
																}
																//vidas mapa 8
																if (x7 == X7[0] && y7 == Y7[0] || x7 == Xb7[0] && y7 == Yb7[0]) { vidas--; x7 = x6; y = 29; }
																if (x7 == X7[1] && y7 == Y7[1] || x7 == Xb7[1] && y7 == Yb7[1]) { vidas--; x7 = x6; y = 29; }
																if (x7 == X7[2] && y7 == Y7[2] || x7 == Xb7[2] && y7 == Yb7[2]) { vidas--; x7 = x6; y = 29; }
																if (vidas == 0) {
																	Console::Clear();
																	cout << "GAME OVER";
																	_getch();
																	break;
																}
															}//fin while
														}
														else {
															Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
															cout << "Puntaje necesario: 5900";
														}
														//puntaje
														if (mapa_juego[y6][x6] == 5)
														{
															puntaje += 100;
															mapa_juego[y6][x6] = 2;
														}
														//vidas mapa 7
														if (x6 == X6[0] && y6 == Y6[0] || x6 == Xb6[0] && y6 == Yb6[0]) { vidas--; x6 = x5; y6 = 29; }
														if (x6 == X6[1] && y6 == Y6[1] || x6 == Xb6[1] && y6 == Yb6[1]) { vidas--; x6 = x5; y6 = 29; }
														if (x6 == X6[2] && y6 == Y6[2] || x6 == Xb6[2] && y6 == Yb6[2]) { vidas--; x6 = x5; y6 = 29; }
														if (vidas == 0) {
															Console::Clear();
															cout << "GAME OVER";
															_getch();
															break;
														}
													}//fin while
												}
												else {
													Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
													cout << "Puntaje necesario: 5300";
												}
												//puntaje
												if (mapa_juego[y5][x5] == 5)
												{
													puntaje += 100;
													mapa_juego[y5][x5] = 2;
												}
												//vidas mapa 6
												if (x5 == X5[0] && y5 == Y5[0] || x5 == Xb5[0] && y5 == Yb5[0]) { vidas--; x5 = x4; y5 = 29; }
												if (x5 == X5[1] && y5 == Y5[1] || x5 == Xb5[1] && y5 == Yb5[1]) { vidas--; x5 = x4; y5 = 29; }
												if (x5 == X5[2] && y5 == Y5[2] || x5 == Xb5[2] && y5 == Yb5[2]) { vidas--; x5 = x4; y5 = 29; }
												if (vidas == 0) {
													Console::Clear();
													cout << "GAME OVER";
													_getch();
													break;
												}
											}//fin while

										}
										else {
											Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
											cout << "Puntaje necesario: 4400";
										}
										//puntaje
										if (mapa_juego[y4][x4] == 5)
										{
											puntaje += 100;
											mapa_juego[y4][x4] = 2;
										}
										//vidas mapa 5
										if (x4 == X4[0] && y4 == Y4[0] || x4 == Xb4[0] && y == Yb4[0]) { vidas--; x4 = x3; y4 = 29; }
										if (x4 == X4[1] && y4 == Y4[1] || x4 == Xb4[1] && y == Yb4[1]) { vidas--; x4 = x3; y4 = 29; }
										if (x4 == X4[2] && y4 == Y4[2] || x4 == Xb4[2] && y == Yb4[2]) { vidas--; x4 = x3; y4 = 29; }
										if (vidas == 0) {
											Console::Clear();
											cout << "GAME OVER";
											_getch();
											break;
										}
									}//fin while
								}
								else {
									Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
									cout << "Puntaje necesario: 2300";
								}
								//puntaje
								if (mapa_juego[y3][x3] == 5)
								{
									puntaje += 100;
									mapa_juego[y3][x3] = 2;
								}
								//vidas mapa 4
								if (x3 == X3[0] && y3 == Y3[0] || x3 == Xb3[0] && y3 == Yb3[0]) { vidas--; x3 = x2; y3 = 29; }
								if (x3 == X3[1] && y3 == Y3[1] || x3 == Xb3[1] && y3 == Yb3[1]) { vidas--; x3 = x2; y3 = 29; }
								if (x3 == X3[2] && y3 == Y3[2] || x3 == Xb3[2] && y3 == Yb3[2]) { vidas--; x3 = x2; y3 = 29; }
								if (vidas == 0) {
									Console::Clear();
									cout << "GAME OVER";
									_getch();
									break;
								}
							}//fin while
						}
						else {
							Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
							cout << "Puntaje necesario: 1700";
						}
						//puntaje
						if (mapa_juego[y2][x2] == 5)
						{
							puntaje += 100;
							mapa_juego[y2][x2] = 2;
						}
						//vidas mapa 3
						if (x2 == X2[0] && y2 == Y2[0] || x2 == Xb2[0] && y2 == Yb2[0]) { vidas--; x2 = x1; y2 = 29; }
						if (x2 == X2[1] && y2 == Y2[1] || x2 == Xb2[1] && y2 == Yb2[1]) { vidas--; x2 = x1; y2 = 29; }
						if (x2 == X2[2] && y2 == Y2[2] || x2 == Xb2[2] && y2 == Yb2[2]) { vidas--; x2 = x1; y2 = 29; }
						if (vidas == 0) {
							Console::Clear();
							cout << "GAME OVER";
							_getch();
							break;
						}
					}//fin while
				}
				else {
					Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
					cout << "Puntaje necesario: 1100";
				}
				//puntaje
				if (mapa_juego[y1][x1] == 5)
				{
					puntaje += 100;
					mapa_juego[y1][x1] = 2;
				}
				//vidas mapa 2
				if (x1 == X1[0] && y1 == Y1[0] || x1 == Xb1[0] && y1 == Yb1[0]) { vidas--; x1 = x; y1 = 29; }
				if (x1 == X1[1] && y1 == Y1[1] || x1 == Xb1[1] && y1 == Yb1[1]) { vidas--; x1 = x; y1 = 29; }
				if (x1 == X1[2] && y1 == Y1[2] || x1 == Xb1[2] && y1 == Yb1[2]) { vidas--; x1 = x; y1 = 29; }
				if (vidas == 0) {
					Console::Clear();
					cout << "GAME OVER";
					_getch();
					break;
				}
			}//fin while
		}
		else {
			Console::SetCursorPosition(0, 34); Console::ForegroundColor = ConsoleColor::White;
			cout << "Puntaje necesario: 300";
		}
		//puntaje
		if (mapa_juego[y][x] == 5)
		{
			puntaje += 100;
			mapa_juego[y][x] = 2;
		}
		//vidas mapa 1
		if (x == X[0] && y == Y[0] || x == Xb[0] && y == Yb[0]) { vidas--; x = 27; y = 29; }
		if (x == X[1] && y == Y[1] || x == Xb[1] && y == Yb[1]) { vidas--; x = 27; y = 29; }
		if (x == X[2] && y == Y[2] || x == Xb[2] && y == Yb[2]) { vidas--; x = 27; y = 29; }
		if (vidas == 0) {
			Console::Clear();
			Console::SetCursorPosition(32, 17);
			cout << "GAME OVER";
			_getch();
			break;
		}
	}//fin while

	_getch();
	return 0;
}